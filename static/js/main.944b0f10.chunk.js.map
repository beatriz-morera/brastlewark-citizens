{"version":3,"sources":["components/InfoCard.jsx","services/citizens.js","hooks.js","pages/Home.jsx","components/Filter.jsx","pages/Search.jsx","pages/Detail.jsx","components/CitizensProvider.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["React","memo","thumbnail","name","age","weight","height","id","to","className","src","alt","SERVICE_URL","process","a","fetch","res","json","citizens","Brastlewark","CitizensContext","createContext","useCitizens","useState","setCitizens","useEffect","getCitizens","then","data","useContextCitizens","useContext","Home","data-testid","dataSource","renderItem","citizen","Item","key","grid","xs","sm","md","lg","xl","xxl","pagination","size","defaultPageSize","pageSizeOptions","showSizeChanger","Search","Input","onChange","handleChange","useCallback","text","placeholder","onSearch","enterButton","searchedCitizen","setSearchedCitizen","trim","filter","toLowerCase","includes","useFilteredCitizens","filterCitizen","Filter","loading","length","itemLayout","slice","Meta","avatar","title","Detail","useParams","useMemo","find","c","parseInt","friends","map","f","hair_color","style","margin","fontWeight","professions","p","color","friend","marginTop","UsersProvider","children","Provider","value","App","CitizensProvider","path","component","exact","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.944b0f10.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Link } from 'react-router-dom';\n\nconst InfoCard = ({ thumbnail, name, age, weight, height, id }) => {\n  return (\n    <Link to={`/search/${id}`}>\n      <div className=\"card-container\">\n        <div className=\"card\">\n          <div className=\"image-container\">\n            <img className=\"image\" src={thumbnail} alt={name} />\n          </div>\n          <section className=\"details-container\">\n            <h4 className=\"citizen-name\">{name}</h4>\n            <ul>\n              <li className=\"details\">\n                <span className=\"details-title\">age:</span> {age}\n              </li>\n              <li className=\"details\">\n                <span className=\"details-title\">weight:</span> {weight}\n              </li>\n              <li className=\"details\">\n                <span className=\"details-title\">height:</span> {height}\n              </li>\n            </ul>\n          </section>\n        </div>\n      </div>\n    </Link>\n  );\n};\n\nexport default React.memo(InfoCard);\n","const SERVICE_URL = process.env.REACT_APP_SERVICE_URL;\n\nexport async function getCitizens() {\n  const res = await fetch(SERVICE_URL);\n  const citizens = await res.json();\n  return citizens.Brastlewark;\n}\n","import { useState, useEffect, useCallback, useContext, createContext } from 'react';\n\nimport { getCitizens } from './services/citizens';\n\nexport const CitizensContext = createContext([]);\n\nexport function useCitizens() {\n  const [citizens, setCitizens] = useState([]);\n\n  useEffect(() => {\n    getCitizens().then((data) => setCitizens(data));\n  }, []);\n\n  return citizens;\n}\n\nexport const useContextCitizens = () => useContext(CitizensContext);\n\nexport function useFilteredCitizens() {\n  const citizens = useContextCitizens();\n\n  const [searchedCitizen, setSearchedCitizen] = useState([]);\n\n  useEffect(() => setSearchedCitizen(citizens), [citizens]);\n\n  const filterCitizen = useCallback(\n    (text) => {\n      const name = text.trim();\n      if (name !== '') {\n        setSearchedCitizen(\n          citizens.filter((citizen) => citizen.name.toLowerCase().includes(name.toLowerCase()))\n        );\n      } else {\n        setSearchedCitizen(citizens);\n      }\n    },\n    [citizens]\n  );\n\n  return [searchedCitizen, filterCitizen];\n}\n","import React from 'react';\nimport { List } from 'antd';\n\nimport InfoCard from '../components/InfoCard';\n\nimport { useContextCitizens } from '../hooks';\n\nconst Home = () => {\n  const citizens = useContextCitizens();\n\n  return (\n    <section className=\"all-cards-container\" data-testid=\"home-page\">\n      <List\n        data-testid=\"citizens\"\n        dataSource={citizens}\n        renderItem={(citizen) => (\n          <List.Item>\n            <InfoCard key={citizen.id} {...citizen} data-testid={citizen.id} />\n          </List.Item>\n        )}\n        grid={{\n          xs: 1,\n          sm: 2,\n          md: 3,\n          lg: 3,\n          xl: 4,\n          xxl: 6,\n        }}\n        pagination={{\n          size: 'small',\n          defaultPageSize: 10,\n          pageSizeOptions: ['10', '20', '30'],\n          showSizeChanger: true,\n        }}\n      />\n    </section>\n  );\n};\n\nexport default Home;\n","import React, { useCallback } from 'react';\nimport { Input } from 'antd';\n\nconst { Search } = Input;\n\nexport default ({ onChange }) => {\n  const handleChange = useCallback((text) => onChange && onChange(text), [onChange]);\n\n  return (\n    <div className=\"filter-container\">\n      <Search\n        placeholder=\"search citizents by name\"\n        onSearch={handleChange}\n        size=\"large\"\n        enterButton\n        data-testid=\"searchbar\"\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { List, Avatar } from 'antd';\n\nimport { useFilteredCitizens } from '../hooks';\n\nimport Filter from '../components/Filter';\n\nconst Search = () => {\n  const [searchedCitizen, filterCitizen] = useFilteredCitizens();\n  return (\n    <div className=\"search-page-container\" data-testid=\"search-page\">\n      <Filter onChange={filterCitizen} />\n      <section className=\"list-container\">\n        <List\n          loading={searchedCitizen.length === 0}\n          itemLayout=\"horizontal\"\n          dataSource={searchedCitizen.slice(0, 100)}\n          renderItem={(citizen) => (\n            <List.Item>\n              <List.Item.Meta avatar={<Avatar src={citizen.thumbnail} />} title={citizen.name} />\n              <div>\n                <Link to={`/search/${citizen.id}`}>View</Link>\n              </div>\n            </List.Item>\n          )}\n        />\n      </section>\n    </div>\n  );\n};\n\nexport default Search;\n","import React, { useMemo } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport { Avatar, List } from 'antd';\nimport { useContextCitizens } from '../hooks';\n\nconst Detail = () => {\n  const { id } = useParams();\n  const citizens = useContextCitizens();\n  const citizen = useMemo(() => citizens.find((c) => id && c.id === parseInt(id, 10)), [\n    citizens,\n    id,\n  ]);\n  const friends = useMemo(\n    () =>\n      citizen && citizen.friends\n        ? citizen.friends.map((name) => citizens.find((f) => f.name === name))\n        : [],\n    [citizen, citizens]\n  );\n\n  return (\n    <div className=\"deatail-page-container\">\n      {citizen && (\n        <section className=\"detail-page-container\">\n          <div>\n            <Avatar size={250} src={citizen.thumbnail} data-testid=\"avatar\" />\n            <div className=\"detail-page-basic-info-container\">\n              <h3 className=\"citizen-name\" data-testid=\"name\">\n                {citizen.name}\n              </h3>\n              <ul>\n                <li className=\"detail-page-info\">\n                  <span className=\"details-title\">age: </span>\n                  {citizen.age}\n                </li>\n                <li className=\"detail-page-info\">\n                  <span className=\"details-title\">weight: </span>\n                  {citizen.weight}\n                </li>\n                <li className=\"detail-page-info\">\n                  <span className=\"details-title\">height: </span>\n                  {citizen.height}\n                </li>\n                <li className=\"detail-page-info\">\n                  <span className=\"details-title\">hair color: </span>\n                  {citizen.hair_color}\n                </li>\n              </ul>\n            </div>\n          </div>\n          <div className=\"detail-page-extra-info-container\">\n            <div className=\"detail-page-extra-info\">\n              <h3 style={{ margin: '16px 0', fontWeight: '600' }}>Professions</h3>\n              {citizen.professions.length ? (\n                <List\n                  size=\"small\"\n                  itemLayout=\"horizontal\"\n                  dataSource={citizen.professions}\n                  renderItem={(p) => <List.Item>{p}</List.Item>}\n                />\n              ) : (\n                <p style={{ color: 'red' }}>No professions to show.</p>\n              )}\n            </div>\n            <div className=\"detail-page-extra-info\">\n              <h3 style={{ margin: '16px 0', fontWeight: '600' }}>Friends</h3>\n              <div className=\"friends-info-container-container\">\n                <ul className=\"friends-info-container\">\n                  {citizen.friends.length ? (\n                    friends.map((friend) => (\n                      <li className=\"friend-info\" key={friend.id}>\n                        <Avatar size={70} src={friend.thumbnail} />\n                        <Link\n                          to={`/search/${friend.id}`}\n                          style={{\n                            marginTop: '15px',\n                          }}\n                        >\n                          {friend.name}\n                        </Link>\n                      </li>\n                    ))\n                  ) : (\n                    <p style={{ color: 'red' }}>No friends to show.</p>\n                  )}\n                </ul>\n              </div>\n            </div>\n          </div>\n        </section>\n      )}\n    </div>\n  );\n};\n\nexport default Detail;\n","import React from 'react';\nimport { useCitizens, CitizensContext } from '../hooks';\n\nconst UsersProvider = ({ children }) => {\n  const citizens = useCitizens();\n  return <CitizensContext.Provider value={citizens}>{children}</CitizensContext.Provider>;\n};\n\nexport default UsersProvider;\n","import React from 'react';\nimport { HashRouter, Switch, Link, Route, Redirect } from 'react-router-dom';\n\nimport Home from './pages/Home';\nimport Search from './pages/Search';\nimport Detail from './pages/Detail';\n\nimport CitizensProvider from './components/CitizensProvider';\n\nconst App = () => (\n  <CitizensProvider>\n    <HashRouter>\n      <header className=\"navigation\" data-testid=\"header\">\n        <Link to=\"/home\" data-testid=\"home-link\">\n          <h1 className=\"page-title\">BRASTLEWARK</h1>\n        </Link>\n        <ul className=\"navigation-items\">\n          <li>\n            <Link to=\"/home\" className=\"navigation-elements\">\n              HOME\n            </Link>\n          </li>\n          <li>\n            <Link to=\"/search\" className=\"navigation-elements\" data-testid=\"search-link\">\n              SEARCH\n            </Link>\n          </li>\n        </ul>\n      </header>\n      <Switch>\n        <Route path=\"/home\" component={Home} exact />\n        <Route path=\"/search\" component={Search} exact />\n        <Route path=\"/search/:id\" component={Detail} />\n        <Route path=\"/\" render={() => <Redirect to=\"/home\" />} exact />\n      </Switch>\n    </HashRouter>\n  </CitizensProvider>\n);\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}