{"version":3,"sources":["components/InfoCard.js","hooks.js","services/citizens.js","pages/Home.js","components/Filter.js","pages/Search.js","pages/Detail.js","components/CitizensProvider.js","App.js","serviceWorker.js","index.js"],"names":["React","memo","thumbnail","name","age","weight","height","id","to","className","src","alt","CitizensContext","createContext","useCitizens","useState","citizens","setCitizens","useEffect","a","async","fetch","process","res","json","Brastlewark","getCitizens","then","useContextCitizens","useContext","Home","dataSource","renderItem","citizen","Item","key","grid","xs","sm","md","lg","pagination","size","defaultPageSize","pageSizeOptions","showSizeChanger","Search","Input","Filter","onChange","placeholder","onSearch","enterButton","searchedCitizen","setSearchedCitizen","useCallback","text","filter","toLowerCase","includes","useFilteredCitizens","filterCitizen","loading","length","itemLayout","slice","Meta","avatar","title","Detail","useParams","useMemo","find","c","parseInt","friends","map","f","hair_color","style","margin","fontWeight","professions","p","color","friend","marginTop","UsersProvider","children","Provider","value","App","CitizensProvider","path","component","exact","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5eb420b0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst InfoCard = ({ thumbnail, name, age, weight, height, id }) => {\r\n  return (\r\n    <Link to={`/search/${id}`}>\r\n      <div className=\"card-container\">\r\n        <div className=\"card\">\r\n          <div className=\"image-container\">\r\n            <img className=\"image\" src={thumbnail} alt={name} />\r\n          </div>\r\n          <section className=\"details-container\">\r\n            <h4 className=\"citizen-name\">{name}</h4>\r\n            <ul>\r\n              <li className=\"details\">\r\n                <span className=\"details-title\">age:</span> {age}\r\n              </li>\r\n              <li className=\"details\">\r\n                <span className=\"details-title\">weight:</span> {weight}\r\n              </li>\r\n              <li className=\"details\">\r\n                <span className=\"details-title\">height:</span> {height}\r\n              </li>\r\n            </ul>\r\n          </section>\r\n        </div>\r\n      </div>\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default React.memo(InfoCard);\r\n","import {\r\n  useState,\r\n  useEffect,\r\n  useCallback,\r\n  useContext,\r\n  createContext\r\n} from 'react';\r\n\r\nimport { getCitizens } from './services/citizens';\r\n\r\nexport const CitizensContext = createContext([]);\r\n\r\nexport function useCitizens() {\r\n  const [citizens, setCitizens] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getCitizens().then(citizens => setCitizens(citizens));\r\n  }, []);\r\n\r\n  return citizens;\r\n}\r\n\r\nexport const useContextCitizens = () => useContext(CitizensContext);\r\n\r\nexport function useFilteredCitizens() {\r\n  const citizens = useContextCitizens();\r\n\r\n  const [searchedCitizen, setSearchedCitizen] = useState([]);\r\n\r\n  useEffect(() => setSearchedCitizen(citizens), [citizens]);\r\n\r\n  const filterCitizen = useCallback(\r\n    text => {\r\n      setSearchedCitizen(\r\n        citizens.filter(citizen =>\r\n          citizen.name.toLowerCase().includes(text.toLowerCase())\r\n        )\r\n      );\r\n    },\r\n    [citizens]\r\n  );\r\n\r\n  return [searchedCitizen, filterCitizen];\r\n}\r\n","const SERVICE_URL = process.env.REACT_APP_SERVICE_URL;\r\n\r\nexport async function getCitizens() {\r\n  const res = await fetch(SERVICE_URL);\r\n  const citizens = await res.json();\r\n  return citizens.Brastlewark;\r\n}\r\n","import React from 'react';\r\nimport { List } from 'antd';\r\n\r\nimport InfoCard from '../components/InfoCard';\r\n\r\nimport { useContextCitizens } from '../hooks';\r\n\r\nconst Home = () => {\r\n  const citizens = useContextCitizens();\r\n\r\n  return (\r\n    <section className=\"all-cards-container\">\r\n      <List\r\n        dataSource={citizens}\r\n        renderItem={citizen => (\r\n          <List.Item>\r\n            <InfoCard key={citizen.id} {...citizen} />\r\n          </List.Item>\r\n        )}\r\n        grid={{ xs: 1, sm: 2, md: 3, lg: 4 }}\r\n        pagination={{\r\n          size: 'small',\r\n          defaultPageSize: 10,\r\n          pageSizeOptions: ['10', '20', '30'],\r\n          showSizeChanger: true\r\n        }}\r\n      />\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\r\n\r\nimport { Input } from 'antd';\r\n\r\nconst { Search } = Input;\r\n\r\nconst Filter = ({ onChange }) => {\r\n  return (\r\n    <div className=\"filter-container\">\r\n      <Search\r\n        placeholder=\"search citizents by name\"\r\n        onSearch={onChange}\r\n        size=\"large\"\r\n        enterButton\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { List, Avatar } from 'antd';\r\n\r\nimport { useFilteredCitizens } from '../hooks';\r\n\r\nimport Filter from '../components/Filter';\r\n\r\nconst Search = () => {\r\n  const [searchedCitizen, filterCitizen] = useFilteredCitizens();\r\n  return (\r\n    <div className=\"search-page-container\">\r\n      <Filter onChange={filterCitizen} />\r\n      <section className=\"list-container\">\r\n        <List\r\n          loading={searchedCitizen.length === 0}\r\n          itemLayout=\"horizontal\"\r\n          dataSource={searchedCitizen.slice(0, 100)}\r\n          renderItem={citizen => (\r\n            <List.Item>\r\n              <List.Item.Meta\r\n                avatar={<Avatar src={citizen.thumbnail} />}\r\n                title={citizen.name}\r\n              />\r\n              <div>\r\n                <Link to={`/search/${citizen.id}`}>View</Link>\r\n              </div>\r\n            </List.Item>\r\n          )}\r\n        />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React, { useMemo } from 'react';\r\nimport { useParams, Link } from 'react-router-dom';\r\nimport { useContextCitizens } from '../hooks';\r\nimport { Avatar, List } from 'antd';\r\n\r\nconst Detail = () => {\r\n  const { id } = useParams();\r\n  const citizens = useContextCitizens();\r\n  const citizen = useMemo(\r\n    () => citizens.find(c => id && c.id === parseInt(id)),\r\n    [citizens, id]\r\n  );\r\n  const friends = useMemo(\r\n    () =>\r\n      citizen && citizen.friends\r\n        ? citizen.friends.map(name => citizens.find(f => f.name === name))\r\n        : [],\r\n    [citizen, citizens]\r\n  );\r\n\r\n  return (\r\n    <div className=\"deatail-page-container\">\r\n      {citizen && (\r\n        <section className=\"detail-page-container\">\r\n          <div>\r\n            <Avatar size={250} src={citizen.thumbnail} />\r\n            <div className=\"detail-page-basic-info-container\">\r\n              <h3 className=\"citizen-name\">{citizen.name}</h3>\r\n              <ul>\r\n                <li className=\"detail-page-info\">\r\n                  <span className=\"details-title\">age: </span> {citizen.age}\r\n                </li>\r\n                <li className=\"detail-page-info\">\r\n                  <span className=\"details-title\">weight: </span>{' '}\r\n                  {citizen.weight}\r\n                </li>\r\n                <li className=\"detail-page-info\">\r\n                  <span className=\"details-title\">height: </span>{' '}\r\n                  {citizen.height}\r\n                </li>\r\n                <li className=\"detail-page-info\">\r\n                  <span className=\"details-title\">hair color: </span>\r\n                  {citizen.hair_color}\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n          <div className=\"detail-page-extra-info-container\">\r\n            <div className=\"detail-page-extra-info\">\r\n              <h3 style={{ margin: '16px 0', fontWeight: '600' }}>\r\n                Professions\r\n              </h3>\r\n              {citizen.professions.length ? (\r\n                <List\r\n                  size=\"small\"\r\n                  itemLayout=\"horizontal\"\r\n                  dataSource={citizen.professions}\r\n                  renderItem={p => <List.Item>{p}</List.Item>}\r\n                />\r\n              ) : (\r\n                <p style={{ color: 'red' }}>There are no professions to show</p>\r\n              )}\r\n            </div>\r\n            <div className=\"detail-page-extra-info\">\r\n              <h3 style={{ margin: '16px 0', fontWeight: '600' }}>Friends</h3>\r\n              <div className=\"friends-info-container-container\">\r\n                <ul className=\"friends-info-container\">\r\n                  {citizen.friends.length ? (\r\n                    friends.map(friend => (\r\n                      <li className=\"friend-info\" key={friend.id}>\r\n                        <Avatar size={70} src={friend.thumbnail} />\r\n                        <Link\r\n                          to={`/search/${friend.id}`}\r\n                          style={{\r\n                            marginTop: '15px'\r\n                          }}\r\n                        >\r\n                          {friend.name}\r\n                        </Link>\r\n                      </li>\r\n                    ))\r\n                  ) : (\r\n                    <p style={{ color: 'red' }}>\r\n                      This citizen does not have any friends\r\n                    </p>\r\n                  )}\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Detail;\r\n","import React from 'react';\r\nimport { useCitizens, CitizensContext } from '../hooks';\r\n\r\nconst UsersProvider = ({ children }) => {\r\n  const citizens = useCitizens();\r\n  return (\r\n    <CitizensContext.Provider value={citizens}>\r\n      {children}\r\n    </CitizensContext.Provider>\r\n  );\r\n};\r\n\r\nexport default UsersProvider;\r\n","import React from 'react';\r\nimport { HashRouter, Switch, Link, Route, Redirect } from 'react-router-dom';\r\n\r\nimport Home from './pages/Home';\r\nimport Search from './pages/Search';\r\nimport Detail from './pages/Detail';\r\n\r\nimport CitizensProvider from './components/CitizensProvider';\r\n\r\nconst App = () => {\r\n  return (\r\n    <CitizensProvider>\r\n      <HashRouter>\r\n        <header className=\"navigation\">\r\n          <Link to=\"/home\">\r\n            <h1 className=\"page-title\">BRASTLEWARK</h1>\r\n          </Link>\r\n          <ul className=\"navigation-items\">\r\n            <li>\r\n              <Link to=\"/home\" className=\"navigation-elements\">\r\n                HOME\r\n              </Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/search\" className=\"navigation-elements\">\r\n                SEARCH\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n        </header>\r\n        <Switch>\r\n          <Route path=\"/home\" component={Home} exact={true} />\r\n          <Route path=\"/search\" component={Search} exact={true} />\r\n          <Route path=\"/search/:id\" component={Detail} />\r\n          <Route path=\"/\" render={() => <Redirect to=\"/home\" />} exact={true} />\r\n        </Switch>\r\n      </HashRouter>\r\n    </CitizensProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}